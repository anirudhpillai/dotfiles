{"version":1,"windowDimensions":{"x":0,"y":18,"width":1366,"height":750,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/anirudh/Desktop/start"],"buffers":[{"id":"c48f655bd6dd74e090793d425abec3ce","text":"express = require 'express'\nstylus = require 'stylus'\nassets = require 'connect-assets'\nmongoose = require 'mongoose'\nsession = require('express-session')\ncookieParser = require('cookie-parser')\nbodyParser = require(\"body-parser\")\n\n#### Basic application initialization\n# Create app instance.\napp = express()\n\n# Define Port & Environment\napp.port = process.env.PORT or process.env.VMC_APP_PORT or 3000\nenv = process.env.NODE_ENV or \"development\"\n\n# Config module exports has `setEnvironment` function that sets app settings depending on environment.\nconfig = require \"./config\"\nconfig.setEnvironment env\n\n# db_config = \"mongodb://#{config.DB_USER}:#{config.DB_PASS}@#{config.DB_HOST}:#{config.DB_PORT}/#{config.DB_NAME}\"\n# mongoose.connect db_config\n# if env != 'production'\n#   mongoose.connect 'mongodb://localhost/example'\n# else\n#   console.log('If you are running in production, you may want to modify the mongoose connect path')\n\n#### View initialization\n# Add Connect Assets.\napp.use assets()\n# Set the public folder as static assets.\napp.use express.static(process.cwd() + '/public')\n\n# Express Session\nconsole.log \"setting session/cookie\"\napp.use cookieParser()\napp.use session(\n  secret: \"keyboard cat\"\n  key: \"sid\"\n  cookie:\n    secure: true\n)\n\n# Set View Engine.\napp.set 'view engine', 'jade'\n\n# [Body parser middleware](http://www.senchalabs.org/connect/middleware-bodyParser.html) parses JSON or XML bodies into `req.body` object\napp.use bodyParser()\n\n\n#### Finalization\n# Initialize routes\nroutes = require './routes'\nroutes(app)\n\n\n# Export application object\nmodule.exports = app\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":22,"column":0},"end":{"row":26,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":27,"column":22},"end":{"row":27,"column":22}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":4,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[22,0],[25,8]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[22,0],[22,0]],"newRange":[[22,0],[22,2]],"oldText":"","newText":"# "}},{"type":"change","content":{"oldRange":[[23,0],[23,0]],"newRange":[[23,0],[23,2]],"oldText":"","newText":"# "}},{"type":"change","content":{"oldRange":[[24,0],[24,0]],"newRange":[[24,0],[24,2]],"oldText":"","newText":"# "}},{"type":"change","content":{"oldRange":[[25,0],[25,0]],"newRange":[[25,0],[25,2]],"oldText":"","newText":"# "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[22,0],[25,10]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/start/src/index.coffee","digestWhenLastPersisted":"bc7340e32f974407622b1ba96675b3da6ce978e3","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5},{"id":"90a1ba4464a0950015c9314b227dad12","text":"fs            = require 'fs'\nwrench        = require 'wrench'\n{print}       = require 'util'\nwhich         = require 'which'\n{spawn, exec} = require 'child_process'\n\n# ANSI Terminal Colors\nbold  = '\\x1B[0;1m'\nred   = '\\x1B[0;31m'\ngreen = '\\x1B[0;32m'\nreset = '\\x1B[0m'\n\npkg = JSON.parse fs.readFileSync('./package.json')\ntestCmd = pkg.scripts.test\nstartCmd = pkg.scripts.start\n  \n\nlog = (message, color, explanation) ->\n  console.log color + message + reset + ' ' + (explanation or '')\n\n# Compiles app.coffee and src directory to the .app directory\nbuild = (callback) ->\n  options = ['-c','-b', '-o', '.app', 'src']\n  cmd = which.sync 'coffee'\n  coffee = spawn cmd, options\n  coffee.stdout.pipe process.stdout\n  coffee.stderr.pipe process.stderr\n  coffee.on 'exit', (status) -> callback?() if status is 0\n\n# mocha test\ntest = (callback) ->\n  options = [\n    '--globals'\n    'hasCert,res'\n    '--reporter'\n    'spec'\n    '--compilers'\n    'coffee:coffee-script/register'\n    '--colors'\n    '--require'\n    'should'\n    '--require'\n    './server'\n  ]\n  try\n    cmd = which.sync 'mocha' \n    spec = spawn cmd, options\n    spec.stdout.pipe process.stdout \n    spec.stderr.pipe process.stderr\n    spec.on 'exit', (status) -> callback?() if status is 0\n  catch err\n    log err.message, red\n    log 'Mocha is not installed - try npm install mocha -g', red\n\ntask 'docs', 'Generate annotated source code with Docco', ->\n  files = wrench.readdirSyncRecursive(\"src\")\n  files = (\"src/#{file}\" for file in files when /\\.coffee$/.test file)\n  log files\n  try\n    cmd ='./node_modules/.bin/docco-husky' \n    docco = spawn cmd, files\n    docco.stdout.pipe process.stdout\n    docco.stderr.pipe process.stderr\n    docco.on 'exit', (status) -> callback?() if status is 0\n  catch err\n    log err.message, red\n    log 'Docco is not installed - try npm install docco -g', red\n\n\ntask 'build', ->\n  build -> log \":)\", green\n\ntask 'spec', 'Run Mocha tests', ->\n  build -> test -> log \":)\", green\n\ntask 'test', 'Run Mocha tests', ->\n  build -> test -> log \":)\", green\n\ntask 'dev', 'start dev env', ->\n  # watch_coffee\n  options = ['-c', '-b', '-w', '-o', '.app', 'src']\n  cmd = which.sync 'coffee'  \n  coffee = spawn cmd, options\n  coffee.stdout.pipe process.stdout\n  coffee.stderr.pipe process.stderr\n  log 'Watching coffee files', green\n  # watch_js\n  supervisor = spawn 'node', [\n    './node_modules/supervisor/lib/cli-wrapper.js',\n    '-w',\n    '.app,views', \n    '-e', \n    'js|jade', \n    'server'\n  ]\n  supervisor.stdout.pipe process.stdout\n  supervisor.stderr.pipe process.stderr\n  log 'Watching js files and running server', green\n  \ntask 'debug', 'start debug env', ->\n  # watch_coffee\n  options = ['-c', '-b', '-w', '-o', '.app', 'src']\n  cmd = which.sync 'coffee'  \n  coffee = spawn cmd, options\n  coffee.stdout.pipe process.stdout\n  coffee.stderr.pipe process.stderr\n  log 'Watching coffee files', green\n  # run debug mode\n  app = spawn 'node', [\n    '--debug',\n    'server'\n  ]\n  app.stdout.pipe process.stdout\n  app.stderr.pipe process.stderr\n  # run node-inspector\n  inspector = spawn 'node-inspector'\n  inspector.stdout.pipe process.stdout\n  inspector.stderr.pipe process.stderr\n  # run google chrome\n  chrome = spawn 'google-chrome', ['http://0.0.0.0:8080/debug?port=5858']\n  chrome.stdout.pipe process.stdout\n  chrome.stderr.pipe process.stderr\n  log 'Debugging server', green\n  \noption '-n', '--name [NAME]', 'name of model to `scaffold`'\ntask 'scaffold', 'scaffold model/controller/test', (options) ->\n  if not options.name?\n    log \"Please specify model name\", red\n    process.exit(1)\n  log \"Scaffolding `#{options.name}`\", green\n  scaffold = require './scaffold'\n  scaffold options.name\n  \n\n\n  ","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":98,"column":2},"end":{"row":98,"column":2}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/start/Cakefile","digestWhenLastPersisted":"6f7898049c18256c9b37846cb30b59e7222302a2","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":118,"softTabs":true,"firstVisibleScreenRow":7,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":119,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/start/src/index.coffee","bufferId":"c48f655bd6dd74e090793d425abec3ce","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":122,"softTabs":true,"firstVisibleScreenRow":81,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":123,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/start/Cakefile","bufferId":"90a1ba4464a0950015c9314b227dad12","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/anirudh/Desktop/start/Cakefile","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-coffee-script","language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/anirudh/Desktop/start/test/ping_test.coffee","/home/anirudh/Desktop/start/test/posts_test.coffee","/home/anirudh/Desktop/start/test/users_test.coffee","/home/anirudh/Desktop/start/AUTHORS","/home/anirudh/Desktop/start/history.md","/home/anirudh/Desktop/start/assets/css/app.styl","/home/anirudh/Desktop/start/assets/js/app.coffee","/home/anirudh/Desktop/start/src/models/user.coffee","/home/anirudh/Desktop/start/src/models/post.coffee","/home/anirudh/Desktop/start/src/routes.coffee","/home/anirudh/Desktop/start/views/401.jade","/home/anirudh/Desktop/start/views/404.jade","/home/anirudh/Desktop/start/Procfile","/home/anirudh/Desktop/start/views/index.jade","/home/anirudh/Desktop/start/views/layout.jade","/home/anirudh/Desktop/start/package.json","/home/anirudh/Desktop/start/test/app_test.coffee","/home/anirudh/Desktop/start/server.js"]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"stylus","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["stylus"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/anirudh/Desktop/start/src/index.coffee":1471523513885,"/home/anirudh/Desktop/start/Cakefile":1471523742524},"keybinding-resolver":{},"metrics":{"sessionLength":1175019},"tree-view":{"directoryExpansionStates":{"/home/anirudh/Desktop/start":{"isExpanded":true,"entries":{".app":{"isExpanded":false,"entries":{}},".git":{"isExpanded":false,"entries":{}},"assets":{"isExpanded":false,"entries":{}},"docs":{"isExpanded":false,"entries":{}},"node_modules":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"scaffold":{"isExpanded":false,"entries":{}},"src":{"isExpanded":false,"entries":{}},"test":{"isExpanded":false,"entries":{}},"views":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/anirudh/Desktop/start/scaffold","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":412}},"fullScreen":false}