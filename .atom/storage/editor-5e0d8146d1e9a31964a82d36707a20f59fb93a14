{"version":1,"windowDimensions":{"x":0,"y":18,"width":1366,"height":750,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/anirudh/Desktop/kalid"],"buffers":[{"id":"bca6f5cfa8b1cef36fe8c4d49c8d3327","text":"module Main where\n\nimport Parser\nimport Codegen\nimport Emit\n\nimport Control.Monad.Trans\n\nimport System.IO\nimport System.Environment\nimport System.Console.Haskeline\n\nimport qualified LLVM.General.AST as AST\n\ninitModule :: AST.Module\ninitModule = emptyModule \"my cool jit\"\n\nprocess :: AST.Module -> String -> IO (Maybe AST.Module)\nprocess modo source = do\n  let res = parseToplevel source\n  case res of\n    Left err -> print err >> return Nothing\n    Right ex -> do\n      ast <- codegen modo ex\n      return $ Just ast\n\nprocessFile :: String -> IO (Maybe AST.Module)\nprocessFile fname = readFile fname >>= process initModule\n\nrepl :: IO ()\nrepl = runInputT defaultSettings (loop initModule)\n  where\n  loop mod = do\n    minput <- getInputLine \"ready> \"\n    case minput of\n      Nothing -> outputStrLn \"Goodbye.\"\n      Just input -> do\n        modn <- liftIO $ process mod input\n        case modn of\n          Just modn -> loop modn\n          Nothing -> loop mod\n\nmain :: IO ()\nmain = do\n  args <- getArgs\n  case args of\n    []      -> repl\n    [fname] -> processFile fname >> return ()\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":9,"column":22},"end":{"row":9,"column":22}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2},"8":{"id":"8","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":9,"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[22,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[22,0]],"newRange":[[0,0],[0,0]],"oldText":"module Main where\n\nimport Parser\n\nimport Control.Monad.Trans\nimport System.Console.Haskeline\n\nprocess :: String -> IO ()\nprocess line = do\n  let res = parseToplevel line\n  case res of\n    Left err -> print err\n    Right ex -> mapM_ print ex\n\nmain :: IO ()\nmain = runInputT defaultSettings loop\n  where\n    loop = do\n      minput <- getInputLine \"ready> \"\n      case minput of\n        Nothing -> outputStrLn \"Goodbye. \"\n        Just input -> (liftIO $ process input) >> loop\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[47,45]],"oldText":"","newText":"module Main where\n\nimport Parser\nimport Codegen\nimport Emit\n\nimport Control.Monad.Trans\n\nimport System.IO\nimport System.Environment\nimport System.Console.Haskeline\n\nimport qualified LLVM.General.AST as AST\n\ninitModule :: AST.Module\ninitModule = emptyModule \"my cool jit\"\n\nprocess :: AST.Module -> String -> IO (Maybe AST.Module)\nprocess modo source = do\n  let res = parseToplevel source\n  case res of\n    Left err -> print err >> return Nothing\n    Right ex -> do\n      ast <- codegen modo ex\n      return $ Just ast\n\nprocessFile :: String -> IO (Maybe AST.Module)\nprocessFile fname = readFile fname >>= process initModule\n\nrepl :: IO ()\nrepl = runInputT defaultSettings (loop initModule)\n  where\n  loop mod = do\n    minput <- getInputLine \"ready> \"\n    case minput of\n      Nothing -> outputStrLn \"Goodbye.\"\n      Just input -> do\n        modn <- liftIO $ process mod input\n        case modn of\n          Just modn -> loop modn\n          Nothing -> loop mod\n\nmain :: IO ()\nmain = do\n  args <- getArgs\n  case args of\n    []      -> repl\n    [fname] -> processFile fname >> return ()"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[47,45],[47,45]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[47,45],[47,45]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[47,45],[47,45]],"newRange":[[47,45],[48,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[47,45],[47,45]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/kalid/Main.hs","digestWhenLastPersisted":"efd934981cf6d4c20dceebb09ccc2ccf4f3965df","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5},{"id":"ce281817df998f8a0c62f687b4d4c9f4","text":"module Syntax where\n\ntype Name = String\n\ndata Expr\n  = Float Double\n  | Var String\n  | Call Name [Expr]\n  | Function Name [Name] Expr\n  | Extern Name [Name]\n  | BinaryOp Name Expr Expr\n  | UnaryOp Name Expr\n  deriving (Eq, Ord, Show)\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":13,"column":0},"end":{"row":13,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2},"8":{"id":"8","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":9,"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[18,26]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[18,26]],"newRange":[[0,0],[0,0]],"oldText":"module Syntax where\n\ntype Name = String\n\ndata Expr\n  = Float Double\n  | BinOp Op Expr Expr\n  | Var String\n  | Call Name [Expr]\n  | Function Name [Expr] Expr\n  | Extern Name [Expr]\n  deriving (Eq, Ord, Show)\n\ndata Op\n  = Plus\n  | Minus\n  | Times\n  | Divide\n  deriving (Eq, Ord, Show)","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[12,26]],"oldText":"","newText":"module Syntax where\n\ntype Name = String\n\ndata Expr\n  = Float Double\n  | Var String\n  | Call Name [Expr]\n  | Function Name [Name] Expr\n  | Extern Name [Name]\n  | BinaryOp Name Expr Expr\n  | UnaryOp Name Expr\n  deriving (Eq, Ord, Show)"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[12,26],[12,26]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[12,26],[12,26]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[14,0],[14,2]],"newRange":[[14,0],[14,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[14,0],[15,0]],"newRange":[[14,0],[14,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[13,0],[14,0]],"newRange":[[13,0],[13,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[12,26],[12,26]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/kalid/Syntax.hs","digestWhenLastPersisted":"bb123036d9ec1463230720c9d2434fa526b37229","preferredLineEnding":null,"nextMarkerId":16,"deserializer":"TextBuffer","version":5},{"id":"f2d58b4adb1cc0ee0fe4815b3f062c1d","text":"{-# LANGUAGE OverloadedStrings #-}\n\nmodule Emit where\n\nimport LLVM.General.Module\nimport LLVM.General.Context\n\nimport qualified LLVM.General.AST as AST\nimport qualified LLVM.General.AST.Constant as C\nimport qualified LLVM.General.AST.Float as F\nimport qualified LLVM.General.AST.FloatingPointPredicate as FP\n\nimport Data.Word\nimport Data.Int\nimport Control.Monad.Except\nimport Control.Applicative\nimport qualified Data.Map as Map\n\nimport Codegen\nimport qualified Syntax as S\n\ntoSig :: [String] -> [(AST.Type, AST.Name)]\ntoSig = map (\\x -> (double, AST.Name x))\n\ncodegenTop :: S.Expr -> LLVM ()\ncodegenTop (S.Function name args body) = do\n  define double name fnargs bls\n  where\n    fnargs = toSig args\n    bls = createBlocks $ execCodegen $ do\n      entry <- addBlock entryBlockName\n      setBlock entry\n      forM args $ \\a -> do\n        var <- alloca double\n        store var (local (AST.Name a))\n        assign a var\n      cgen body >>= ret\n\ncodegenTop (S.Extern name args) = do\n  external double name fnargs\n  where fnargs = toSig args\n\ncodegenTop exp = do\n  define double \"main\" [] blks\n  where\n    blks = createBlocks $ execCodegen $ do\n      entry <- addBlock entryBlockName\n      setBlock entry\n      cgen exp >>= ret\n\n-------------------------------------------------------------------------------\n-- Operations\n-------------------------------------------------------------------------------\n\nlt :: AST.Operand -> AST.Operand -> Codegen AST.Operand\nlt a b = do\n  test <- fcmp FP.ULT a b\n  uitofp double test\n\nbinops = Map.fromList [\n      (\"+\", fadd)\n    , (\"-\", fsub)\n    , (\"*\", fmul)\n    , (\"/\", fdiv)\n    , (\"<\", lt)\n  ]\n\ncgen :: S.Expr -> Codegen AST.Operand\ncgen (S.UnaryOp op a) = do\n  cgen $ S.Call (\"unary\" ++ op) [a]\ncgen (S.BinaryOp \"=\" (S.Var var) val) = do\n  a <- getvar var\n  cval <- cgen val\n  store a cval\n  return cval\ncgen (S.BinaryOp op a b) = do\n  case Map.lookup op binops of\n    Just f  -> do\n      ca <- cgen a\n      cb <- cgen b\n      f ca cb\n    Nothing -> error \"No such operator\"\ncgen (S.Var x) = getvar x >>= load\ncgen (S.Float n) = return $ cons $ C.Float (F.Double n)\ncgen (S.Call fn args) = do\n  largs <- mapM cgen args\n  call (externf (AST.Name fn)) largs\n\n-------------------------------------------------------------------------------\n-- Compilation\n-------------------------------------------------------------------------------\n\nliftError :: ExceptT String IO a -> IO a\nliftError = runExceptT >=> either fail return\n\ncodegen :: AST.Module -> [S.Expr] -> IO AST.Module\ncodegen mod fns = withContext $ \\context ->\n  liftError $ withModuleFromAST context newast $ \\m -> do\n    llstr <- moduleLLVMAssembly m\n    putStrLn llstr\n    return newast\n  where\n    modn    = mapM codegenTop fns\n    newast  = runLLVM mod modn\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":13,"column":15},"end":{"row":13,"column":15}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2},"9":{"id":"9","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":10,"history":{"version":3,"nextCheckpointId":13,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[13,15],[13,15]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[13,15],[13,15]],"newRange":[[13,15],[13,16]],"oldText":"","newText":"\\"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[13,16],[13,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[13,16],[13,16]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[13,15],[13,16]],"newRange":[[13,15],[13,15]],"oldText":"\\","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[13,15],[13,15]],"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/kalid/Emit.hs","digestWhenLastPersisted":"e0810ac2d784e7e69398d3e00e125925a256f805","preferredLineEnding":null,"nextMarkerId":13,"deserializer":"TextBuffer","version":5},{"id":"4f80f371e2fd298be67d458ec475417a","text":"module Parser where\n\nimport Text.Parsec\nimport Text.Parsec.String (Parser)\nimport Control.Applicative ((<$>))\n\nimport qualified Text.Parsec.Expr as Ex\nimport qualified Text.Parsec.Token as Tok\n\nimport Lexer\nimport Syntax\n\nint :: Parser Expr\nint = do\n  n <- integer\n  return $ Float (fromInteger n)\n\nfloating :: Parser Expr\nfloating = Float <$> float\n\nbinary s assoc = Ex.Infix (reservedOp s >> return (BinaryOp s)) assoc\n\nbinops = [[binary \"*\" Ex.AssocLeft,\n          binary \"/\" Ex.AssocLeft]\n        ,[binary \"+\" Ex.AssocLeft,\n          binary \"-\" Ex.AssocLeft]]\n\nexpr :: Parser Expr\nexpr =  Ex.buildExpressionParser binops factor\n\nvariable :: Parser Expr\nvariable = Var <$> identifier\n\nfunction :: Parser Expr\nfunction = do\n  reserved \"def\"\n  name <- identifier\n  args <- parens $ many identifier\n  body <- expr\n  return $ Function name args body\n\nextern :: Parser Expr\nextern = do\n  reserved \"extern\"\n  name <- identifier\n  args <- parens $ many identifier\n  return $ Extern name args\n\ncall :: Parser Expr\ncall = do\n  name <- identifier\n  args <- parens $ commaSep expr\n  return $ Call name args\n\nfactor :: Parser Expr\nfactor = try floating\n      <|> try int\n      <|> try call\n      <|> try variable\n      <|> (parens expr)\n\ndefn :: Parser Expr\ndefn = try extern\n    <|> try function\n    <|> expr\n\ncontents :: Parser a -> Parser a\ncontents p = do\n  Tok.whiteSpace lexer\n  r <- p\n  eof\n  return r\n\ntoplevel :: Parser [Expr]\ntoplevel = many $ do\n    def <- defn\n    reservedOp \";\"\n    return def\n\nparseExpr :: String -> Either ParseError Expr\nparseExpr s = parse (contents expr) \"<stdin>\" s\n\nparseToplevel :: String -> Either ParseError [Expr]\nparseToplevel s = parse (contents toplevel) \"<stdin>\" s\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":62,"column":17},"end":{"row":62,"column":17}},"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2},"9":{"id":"9","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":10,"history":{"version":3,"nextCheckpointId":27,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[89,0]],"properties":{"type":"selection","autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[89,0]],"newRange":[[0,0],[0,0]],"oldText":"module Parser where\n\nimport Text.Parsec\nimport Text.Parsec.String (Parser)\n\nimport qualified Text.Parsec.Expr as Ex\nimport qualified Text.Parsec.Token as Tok\n\nimport Lexer\nimport Syntax\n\nbinary s f assoc = Ex.Infix (reservedOp s >> return (BinOp f)) assoc\n\ntable = [[binary \"*\" Times Ex.AssocLeft,\n          binary \"/\" Divide Ex.AssocLeft]\n         ,[binary \"+\" Plus Ex.AssocLeft,\n           binary \"-\" Minus Ex.AssocLeft]]\n\nint :: Parser Expr\nint = do\n  n <- integer\n  return $ Float (fromInteger n)\n\nfloating :: Parser Expr\nfloating = do\n  n <- float\n  return $ Float n\n\nexpr :: Parser Expr\nexpr = Ex.buildExpressionParser table factor\n\nvariable :: Parser Expr\nvariable = do\n  var <- identifier\n  return $ Var var\n\nfunction :: Parser Expr\nfunction = do\n  reserved \"def\"\n  name <- identifier\n  args <- parens $ many variable\n  body <- expr\n  return $ Function name args body\n\nextern :: Parser Expr\nextern = do\n  reserved \"extern\"\n  name <- identifier\n  args <- parens $ many variable\n  return $ Extern name args\n\ncall :: Parser Expr\ncall = do\n  name <- identifier\n  args <- parens $ commaSep expr\n  return $ Call name args\n\nfactor :: Parser Expr\nfactor = try floating\n      <|> try int\n      <|> try extern\n      <|> try function\n      <|> try call\n      <|> variable\n      <|> parens expr\n\ndefn :: Parser Expr\ndefn = try extern\n    <|> try function\n    <|> expr\n\ncontents :: Parser a -> Parser a\ncontents p = do\n  Tok.whiteSpace lexer\n  r <- p\n  eof\n  return r\n\ntoplevel :: Parser [Expr]\ntoplevel = many $ do\n  def <- defn\n  reservedOp \";\"\n  return def\n\nparseExpr :: String -> Either ParseError Expr\nparseExpr s = parse (contents expr) \"<stdin>\" s\n\nparseToplevel :: String -> Either ParseError [Expr]\nparseToplevel s = parse (contents toplevel) \"<stdin>\" s\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[1,0]],"newRange":[[0,0],[0,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[1,0]],"newRange":[[0,0],[0,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[1,0]],"newRange":[[0,0],[0,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[82,51]],"oldText":"","newText":"module Parser where\n\nimport Text.Parsec\nimport Text.Parsec.String (Parser)\nimport Control.Applicative ((<$>))\n\nimport qualified Text.Parsec.Expr as Ex\nimport qualified Text.Parsec.Token as Tok\n\nimport Lexer\nimport Syntax\n\nint :: Parser Expr\nint = do\n  n <- integer\n  return $ Float (fromInteger n)\n\nfloating :: Parser Expr\nfloating = Float <$> float\n\nbinary s assoc = Ex.Infix (reservedOp s >> return (BinaryOp s)) assoc\n\nbinops = [[binary \"*\" Ex.AssocLeft,\n          binary \"/\" Ex.AssocLeft]\n        ,[binary \"+\" Ex.AssocLeft,\n          binary \"-\" Ex.AssocLeft]]\n\nexpr :: Parser Expr\nexpr =  Ex.buildExpressionParser binops factor\n\nvariable :: Parser Expr\nvariable = Var <$> identifier\n\nfunction :: Parser Expr\nfunction = do\n  reserved \"def\"\n  name <- identifier\n  args <- parens $ many identifier\n  body <- expr\n  return $ Function name args body\n\nextern :: Parser Expr\nextern = do\n  reserved \"extern\"\n  name <- identifier\n  args <- parens $ many identifier\n  return $ Extern name args\n\ncall :: Parser Expr\ncall = do\n  name <- identifier\n  args <- parens $ commaSep expr\n  return $ Call name args\n\nfactor :: Parser Expr\nfactor = try floating\n      <|> try int\n      <|> try call\n      <|> try variable\n      <|> (parens expr)\n\ndefn :: Parser Expr\ndefn = try extern\n    <|> try function\n    <|> expr\n\ncontents :: Parser a -> Parser a\ncontents p = do\n  Tok.whiteSpace lexer\n  r <- p\n  eof\n  return r\n\ntoplevel :: Parser [Expr]\ntoplevel = many $ do\n    def <- defn\n    reservedOp \";\"\n    return def\n\nparseExpr :: String -> Either ParseError Expr\nparseExpr s = parse (contents expr) \"<stdin>\" s\n\nparseToplevel :: String -> Either ParseError [Expr]"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[82,51],[82,51]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[82,51],[82,51]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[82,51],[82,51]],"newRange":[[82,51],[83,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[83,0],[83,0]],"newRange":[[83,0],[83,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[83,0],[83,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[83,0],[83,0]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[83,0],[83,0]],"newRange":[[83,0],[83,55]],"oldText":"","newText":"parseToplevel s = parse (contents toplevel) \"<stdin>\" s"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[83,55],[83,55]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[83,55],[83,55]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[83,55],[83,55]],"newRange":[[83,55],[84,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[83,55],[83,55]],"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/kalid/Parser.hs","digestWhenLastPersisted":"ffa8b5f8ae4b13d23fa602c2f7a50f25eb111a1b","preferredLineEnding":null,"nextMarkerId":19,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":22,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":23,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/kalid/Main.hs","bufferId":"bca6f5cfa8b1cef36fe8c4d49c8d3327","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":30,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":31,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/kalid/Syntax.hs","bufferId":"ce281817df998f8a0c62f687b4d4c9f4","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":66,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":67,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/kalid/Emit.hs","bufferId":"f2d58b4adb1cc0ee0fe4815b3f062c1d","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":70,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":71,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/kalid/Parser.hs","bufferId":"4f80f371e2fd298be67d458ec475417a","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/anirudh/Desktop/kalid/Parser.hs","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["haskell-grammar","language-hyperlink","language-todo"],"destroyedItemURIs":["atom://config/updates","/home/anirudh/Desktop/kalid/Lexer.hs","/home/anirudh/Desktop/kalid/Codegen.hs","/home/anirudh/Desktop/kalid/kalid.cabal"]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/anirudh/Desktop/kalid/Main.hs":1465155942852,"/home/anirudh/Desktop/kalid/Syntax.hs":1465158886682,"/home/anirudh/Desktop/kalid/Emit.hs":1465160128817,"/home/anirudh/Desktop/kalid/Parser.hs":1465390062439},"metrics":{"sessionLength":256151},"tree-view":{"directoryExpansionStates":{"/home/anirudh/Desktop/kalid":{"isExpanded":true,"entries":{".cabal-sandbox":{"isExpanded":false,"entries":{}},"dist":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/anirudh/Desktop/kalid/Parser.hs","hasFocus":false,"attached":false,"scrollLeft":0,"scrollTop":0,"width":270}},"fullScreen":false}