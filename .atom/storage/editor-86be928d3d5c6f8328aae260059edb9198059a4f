{"version":1,"windowDimensions":{"x":65,"y":24,"width":1301,"height":744,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/anirudh/Desktop/sample"],"buffers":[{"id":"85c81b6fa010aa4812c6884975714f0e","text":"/*\n * Copyright 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/* jshint node: true, devel: true */\n'use strict';\n\nconst \n  bodyParser = require('body-parser'),\n  config = require('config'),\n  crypto = require('crypto'),\n  express = require('express'),\n  https = require('https'),  \n  request = require('request');\n\nvar app = express();\n\napp.set('port', process.env.PORT || 5000);\napp.use(bodyParser.json({ verify: verifyRequestSignature }));\napp.use(express.static('public'));\n\n/*\n * Be sure to setup your config values before running this code. You can \n * set them using environment variables or modifying the config file in /config.\n *\n */\n\n// App Secret can be retrieved from the App Dashboard\nconst APP_SECRET = (process.env.MESSENGER_APP_SECRET) ? \n  process.env.MESSENGER_APP_SECRET :\n  config.get('appSecret');\n\n// Arbitrary value used to validate a webhook\nconst VALIDATION_TOKEN = (process.env.MESSENGER_VALIDATION_TOKEN) ?\n  (process.env.MESSENGER_VALIDATION_TOKEN) :\n  config.get('validationToken');\n\n// Generate a page access token for your page from the App Dashboard\nconst PAGE_ACCESS_TOKEN = (process.env.MESSENGER_PAGE_ACCESS_TOKEN) ?\n  (process.env.MESSENGER_PAGE_ACCESS_TOKEN) :\n  config.get('pageAccessToken');\n\nif (!(APP_SECRET && VALIDATION_TOKEN && PAGE_ACCESS_TOKEN)) {\n  console.error(\"Missing config values\");\n  process.exit(1);\n}\n\n/*\n * Use your own validation token. Check that the token used in the Webhook \n * setup is the same token used here.\n *\n */\napp.get('/webhook', function(req, res) {\n  if (req.query['hub.mode'] === 'subscribe' &&\n      req.query['hub.verify_token'] === VALIDATION_TOKEN) {\n    console.log(\"Validating webhook\");\n    res.status(200).send(req.query['hub.challenge']);\n  } else {\n    console.error(\"Failed validation. Make sure the validation tokens match.\");\n    res.sendStatus(403);          \n  }  \n});\n\n\n/*\n * All callbacks for Messenger are POST-ed. They will be sent to the same\n * webhook. Be sure to subscribe your app to your page to receive callbacks\n * for your page. \n * https://developers.facebook.com/docs/messenger-platform/implementation#subscribe_app_pages\n *\n */\napp.post('/webhook', function (req, res) {\n\n  var data = req.body;\n\n  // Make sure this is a page subscription\n  if (data.object == 'page') {\n    // Iterate over each entry\n    // There may be multiple if batched\n    data.entry.forEach(function(pageEntry) {\n      var pageID = pageEntry.id;\n      var timeOfEvent = pageEntry.time;\n\n      // Iterate over each messaging event\n      pageEntry.messaging.forEach(function(messagingEvent) {\n        if (messagingEvent.optin) {\n          receivedAuthentication(messagingEvent);\n        } else if (messagingEvent.message) {\n          receivedMessage(messagingEvent);\n        } else if (messagingEvent.delivery) {\n          receivedDeliveryConfirmation(messagingEvent);\n        } else if (messagingEvent.postback) {\n          receivedPostback(messagingEvent);\n        } else {\n          console.log(\"Webhook received unknown messagingEvent: \", messagingEvent);\n        }\n      });\n    });\n\n    // Assume all went well.\n    //\n    // You must send back a 200, within 20 seconds, to let us know you've \n    // successfully received the callback. Otherwise, the request will time out.\n    res.sendStatus(200);\n  }\n});\n\n/*\n * Verify that the callback came from Facebook. Using the App Secret from \n * the App Dashboard, we can verify the signature that is sent with each \n * callback in the x-hub-signature field, located in the header.\n *\n * https://developers.facebook.com/docs/graph-api/webhooks#setup\n *\n */\nfunction verifyRequestSignature(req, res, buf) {\n  var signature = req.headers[\"x-hub-signature\"];\n\n  if (!signature) {\n    // For testing, let's log an error. In production, you should throw an \n    // error.\n    console.error(\"Couldn't validate the signature.\");\n  } else {\n    var elements = signature.split('=');\n    var method = elements[0];\n    var signatureHash = elements[1];\n\n    var expectedHash = crypto.createHmac('sha1', APP_SECRET)\n                        .update(buf)\n                        .digest('hex');\n\n    if (signatureHash != expectedHash) {\n      throw new Error(\"Couldn't validate the request signature.\");\n    }\n  }\n}\n\n/*\n * Authorization Event\n *\n * The value for 'optin.ref' is defined in the entry point. For the \"Send to \n * Messenger\" plugin, it is the 'data-ref' field. Read more at \n * https://developers.facebook.com/docs/messenger-platform/webhook-reference#auth\n *\n */\nfunction receivedAuthentication(event) {\n  var senderID = event.sender.id;\n  var recipientID = event.recipient.id;\n  var timeOfAuth = event.timestamp;\n\n  // The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n  // The developer can set this to an arbitrary value to associate the \n  // authentication callback with the 'Send to Messenger' click event. This is\n  // a way to do account linking when the user clicks the 'Send to Messenger' \n  // plugin.\n  var passThroughParam = event.optin.ref;\n\n  console.log(\"Received authentication for user %d and page %d with pass \" +\n    \"through param '%s' at %d\", senderID, recipientID, passThroughParam, \n    timeOfAuth);\n\n  // When an authentication is received, we'll send a message back to the sender\n  // to let them know it was successful.\n  sendTextMessage(senderID, \"Authentication successful\");\n}\n\n\n/*\n * Message Event\n *\n * This event is called when a message is sent to your page. The 'message' \n * object format can vary depending on the kind of message that was received.\n * Read more at https://developers.facebook.com/docs/messenger-platform/webhook-reference#received_message\n *\n * For this example, we're going to echo any text that we get. If we get some \n * special keywords ('button', 'generic', 'receipt'), then we'll send back\n * examples of those bubbles to illustrate the special message bubbles we've \n * created. If we receive a message with an attachment (image, video, audio), \n * then we'll simply confirm that we've received the attachment.\n * \n */\nfunction receivedMessage(event) {\n  var senderID = event.sender.id;\n  var recipientID = event.recipient.id;\n  var timeOfMessage = event.timestamp;\n  var message = event.message;\n\n  console.log(\"Received message for user %d and page %d at %d with message:\", \n    senderID, recipientID, timeOfMessage);\n  console.log(JSON.stringify(message));\n\n  var messageId = message.mid;\n\n  // You may get a text or attachment but not both\n  var messageText = message.text;\n  var messageAttachments = message.attachments;\n\n\n  if (messageText) {\n\n    // If we receive a text message, check to see if it matches any special\n    // keywords and send back the corresponding example. Otherwise, just echo\n    // the text we received.\n    switch (messageText) {\n      case 'image':\n        sendImageMessage(senderID);\n        break;\n\n      case 'button':\n        sendButtonMessage(senderID);\n        break;\n\n      case 'generic':\n        sendGenericMessage(senderID);\n        break;\n\n      case 'receipt':\n        sendReceiptMessage(senderID);\n        break;\n\n      default:\n        sendTextMessage(senderID, messageText);\n    }\n  } else if (messageAttachments) {\n    sendTextMessage(senderID, \"Message with attachment received\");\n  }\n}\n\n\n/*\n * Delivery Confirmation Event\n *\n * This event is sent to confirm the delivery of a message. Read more about \n * these fields at https://developers.facebook.com/docs/messenger-platform/webhook-reference#message_delivery\n *\n */\nfunction receivedDeliveryConfirmation(event) {\n  var senderID = event.sender.id;\n  var recipientID = event.recipient.id;\n  var delivery = event.delivery;\n  var messageIDs = delivery.mids;\n  var watermark = delivery.watermark;\n  var sequenceNumber = delivery.seq;\n\n  if (messageIDs) {\n    messageIDs.forEach(function(messageID) {\n      console.log(\"Received delivery confirmation for message ID: %s\", \n        messageID);\n    });\n  }\n\n  console.log(\"All message before %d were delivered.\", watermark);\n}\n\n\n/*\n * Postback Event\n *\n * This event is called when a postback is tapped on a Structured Message. Read\n * more at https://developers.facebook.com/docs/messenger-platform/webhook-reference#postback\n * \n */\nfunction receivedPostback(event) {\n  var senderID = event.sender.id;\n  var recipientID = event.recipient.id;\n  var timeOfPostback = event.timestamp;\n\n  // The 'payload' param is a developer-defined field which is set in a postback \n  // button for Structured Messages. \n  var payload = event.postback.payload;\n\n  console.log(\"Received postback for user %d and page %d with payload '%s' \" + \n    \"at %d\", senderID, recipientID, payload, timeOfPostback);\n\n  // When a postback is called, we'll send a message back to the sender to \n  // let them know it was successful\n  sendTextMessage(senderID, \"Postback called\");\n}\n\n\n/*\n * Send a message with an using the Send API.\n *\n */\nfunction sendImageMessage(recipientId) {\n  var messageData = {\n    recipient: {\n      id: recipientId\n    },\n    message: {\n      attachment: {\n        type: \"image\",\n        payload: {\n          url: \"http://i.imgur.com/zYIlgBl.png\"\n        }\n      }\n    }\n  };\n\n  callSendAPI(messageData);\n}\n\n/*\n * Send a text message using the Send API.\n *\n */\nfunction sendTextMessage(recipientId, messageText) {\n  var messageData = {\n    recipient: {\n      id: recipientId\n    },\n    message: {\n      text: messageText\n    }\n  };\n\n  callSendAPI(messageData);\n}\n\n/*\n * Send a button message using the Send API.\n *\n */\nfunction sendButtonMessage(recipientId) {\n  var messageData = {\n    recipient: {\n      id: recipientId\n    },\n    message: {\n      attachment: {\n        type: \"template\",\n        payload: {\n          template_type: \"button\",\n          text: \"This is test text\",\n          buttons:[{\n            type: \"web_url\",\n            url: \"https://www.oculus.com/en-us/rift/\",\n            title: \"Open Web URL\"\n          }, {\n            type: \"postback\",\n            title: \"Call Postback\",\n            payload: \"Developer defined postback\"\n          }]\n        }\n      }\n    }\n  };  \n\n  callSendAPI(messageData);\n}\n\n/*\n * Send a Structured Message (Generic Message type) using the Send API.\n *\n */\nfunction sendGenericMessage(recipientId) {\n  var messageData = {\n    recipient: {\n      id: recipientId\n    },\n    message: {\n      attachment: {\n        type: \"template\",\n        payload: {\n          template_type: \"generic\",\n          elements: [{\n            title: \"rift\",\n            subtitle: \"Next-generation virtual reality\",\n            item_url: \"https://www.oculus.com/en-us/rift/\",               \n            image_url: \"http://messengerdemo.parseapp.com/img/rift.png\",\n            buttons: [{\n              type: \"web_url\",\n              url: \"https://www.oculus.com/en-us/rift/\",\n              title: \"Open Web URL\"\n            }, {\n              type: \"postback\",\n              title: \"Call Postback\",\n              payload: \"Payload for first bubble\",\n            }],\n          }, {\n            title: \"touch\",\n            subtitle: \"Your Hands, Now in VR\",\n            item_url: \"https://www.oculus.com/en-us/touch/\",               \n            image_url: \"http://messengerdemo.parseapp.com/img/touch.png\",\n            buttons: [{\n              type: \"web_url\",\n              url: \"https://www.oculus.com/en-us/touch/\",\n              title: \"Open Web URL\"\n            }, {\n              type: \"postback\",\n              title: \"Call Postback\",\n              payload: \"Payload for second bubble\",\n            }]\n          }]\n        }\n      }\n    }\n  };  \n\n  callSendAPI(messageData);\n}\n\n/*\n * Send a receipt message using the Send API.\n *\n */\nfunction sendReceiptMessage(recipientId) {\n  // Generate a random receipt ID as the API requires a unique ID\n  var receiptId = \"order\" + Math.floor(Math.random()*1000);\n\n  var messageData = {\n    recipient: {\n      id: recipientId\n    },\n    message:{\n      attachment: {\n        type: \"template\",\n        payload: {\n          template_type: \"receipt\",\n          recipient_name: \"Peter Chang\",\n          order_number: receiptId,\n          currency: \"USD\",\n          payment_method: \"Visa 1234\",        \n          timestamp: \"1428444852\", \n          elements: [{\n            title: \"Oculus Rift\",\n            subtitle: \"Includes: headset, sensor, remote\",\n            quantity: 1,\n            price: 599.00,\n            currency: \"USD\",\n            image_url: \"http://messengerdemo.parseapp.com/img/riftsq.png\"\n          }, {\n            title: \"Samsung Gear VR\",\n            subtitle: \"Frost White\",\n            quantity: 1,\n            price: 99.99,\n            currency: \"USD\",\n            image_url: \"http://messengerdemo.parseapp.com/img/gearvrsq.png\"\n          }],\n          address: {\n            street_1: \"1 Hacker Way\",\n            street_2: \"\",\n            city: \"Menlo Park\",\n            postal_code: \"94025\",\n            state: \"CA\",\n            country: \"US\"\n          },\n          summary: {\n            subtotal: 698.99,\n            shipping_cost: 20.00,\n            total_tax: 57.67,\n            total_cost: 626.66\n          },\n          adjustments: [{\n            name: \"New Customer Discount\",\n            amount: -50\n          }, {\n            name: \"$100 Off Coupon\",\n            amount: -100\n          }]\n        }\n      }\n    }\n  };\n\n  callSendAPI(messageData);\n}\n\n/*\n * Call the Send API. The message data goes in the body. If successful, we'll \n * get the message id in a response \n *\n */\nfunction callSendAPI(messageData) {\n  request({\n    uri: 'https://graph.facebook.com/v2.6/me/messages',\n    qs: { access_token: PAGE_ACCESS_TOKEN },\n    method: 'POST',\n    json: messageData\n\n  }, function (error, response, body) {\n    if (!error && response.statusCode == 200) {\n      var recipientId = body.recipient_id;\n      var messageId = body.message_id;\n\n      console.log(\"Successfully sent generic message with id %s to recipient %s\", \n        messageId, recipientId);\n    } else {\n      console.error(\"Unable to send message.\");\n      console.error(response);\n      console.error(error);\n    }\n  });  \n}\n\n// Start server\n// Webhooks must be available via SSL with a certificate signed by a valid \n// certificate authority.\napp.listen(app.get('port'), function() {\n  console.log('Node app is running on port', app.get('port'));\n});\n\nmodule.exports = app;\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":49,"column":0},"end":{"row":50,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":5,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/anirudh/Desktop/sample/node/app.js","digestWhenLastPersisted":"da39a3ee5e6b4b0d3255bfef95601890afd80709","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":44,"softTabs":true,"firstVisibleScreenRow":42,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":45,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/anirudh/Desktop/sample/node/app.js","bufferId":"85c81b6fa010aa4812c6884975714f0e","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/anirudh/Desktop/sample/node/app.js","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/anirudh/Desktop/sample/node/config/default.json","/home/anirudh/Desktop/sample/node/public/index.html","/home/anirudh/Desktop/sample/node/package.json","/home/anirudh/Desktop/sample/node/README.md","/home/anirudh/Desktop/sample/CONTRIBUTING.md","/home/anirudh/Desktop/sample/LICENSE","/home/anirudh/Desktop/sample/README.md"]},"packageStates":{"fuzzy-finder":{"/home/anirudh/Desktop/sample/node/app.js":1465808863003},"metrics":{"sessionLength":2040444},"tree-view":{"directoryExpansionStates":{"/home/anirudh/Desktop/sample":{"isExpanded":true,"entries":{}}},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":329}},"fullScreen":false}