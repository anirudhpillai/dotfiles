(function() {
  var EditorState, Mark, getEditorElement, keydown, _, _ref;

  _ = require('underscore-plus');

  EditorState = require('./editor-state');

  Mark = require('./../lib/mark');

  _ref = require('./spec-helper'), keydown = _ref.keydown, getEditorElement = _ref.getEditorElement;

  0;

  describe("Mark", function() {
    var cursor, editor, editorElement, _ref1;
    _ref1 = [], editor = _ref1[0], editorElement = _ref1[1], cursor = _ref1[2];
    beforeEach(function() {
      var workspaceElement;
      workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
      spyOn(_._, 'now').andCallFake(function() {
        return window.now;
      });
      return getEditorElement(function(element) {
        editorElement = element;
        editor = editorElement.getModel();
        return cursor = editor.getLastCursor();
      });
    });
    describe(".for", function() {
      it("returns the mark for the given editor", function() {
        var mark;
        EditorState.set(editor, "a[0]b[1]c");
        mark = Mark["for"](editor);
        return expect(mark.editor).toBe(editor);
      });
      return it("returns the same Mark each time for a cursor", function() {
        var mark;
        mark = Mark["for"](editor);
        return expect(Mark["for"](editor)).toBe(mark);
      });
    });
    describe("constructor", function() {
      it("sets the mark to where the cursor is", function() {
        var column, mark, row, _ref2;
        EditorState.set(editor, ".[0]");
        mark = Mark["for"](editor);
        _ref2 = editor.getCursorBufferPosition(), row = _ref2.row, column = _ref2.column;
        return expect([row, column]).toEqual([0, 1]);
      });
      return it("deactivates and destroys the marker when the editor is destroyed", function() {
        var mark;
        EditorState.set(editor, "[0].");
        mark = Mark["for"](editor);
        editor.destroy();
        return expect(mark.isActive()).toBe(false);
      });
    });
    describe("set", function() {
      return it("clears the active selection", function() {
        var mark;
        EditorState.set(editor, "a(0)b[0]c");
        mark = Mark["for"](editor);
        expect(cursor.selection.getText()).toEqual('b');
        mark.activate();
        return expect(cursor.selection.getText()).toEqual('');
      });
    });
    describe("activate", function() {
      it("activates the mark", function() {
        var mark;
        mark = Mark["for"](editor);
        mark.activate();
        return expect(mark.isActive()).toBe(true);
      });
      it("causes cursor movements to extend the selection", function() {
        EditorState.set(editor, ".[0]..");
        Mark["for"](editor).activate();
        keydown('f', {
          ctrl: true
        });
        return expect(EditorState.get(editor)).toEqual(".(0).[0].");
      });
      it("causes buffer edits to deactivate the mark", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](editor);
        mark.activate();
        keydown('f', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual(".(0).[0].");
        editor.insertText('x');
        advanceClock(100);
        expect(mark.isActive()).toBe(false);
        expect(EditorState.get(editor)).toEqual(".x[0].");
        return expect(cursor.selection.isEmpty()).toBe(true);
      });
      it("doesn't deactive the mark if changes are indents", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](editor);
        mark.activate();
        keydown('f', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual(".(0).[0].");
        editor.indentSelectedRows();
        expect(mark.isActive()).toBe(true);
        expect(EditorState.get(editor)).toEqual("  .(0).[0].");
        return expect(cursor.selection.isEmpty()).toBe(false);
      });
      it("puts the editor into mark mode", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](editor);
        mark.activate();
        editorElement = atom.views.getView(editor);
        return expect(editorElement.classList.contains('mark-mode')).toBeTruthy();
      });
      it('even if a cursor moves, keep selection.', function() {
        var mark;
        mark = Mark["for"](editor);
        EditorState.set(editor, "aaa\n(0)bbb\nccc[0]");
        mark.activate(true);
        expect(mark.isActive()).toBe(true);
        keydown('n', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual("aaa\n(0)bbb\nccc[0]");
        return expect(cursor.selection.isEmpty()).toBe(false);
      });
      it('support merge selections', function() {
        EditorState.set(editor, "[0]aaa 123\n[1]bbb 123\n[2]ccc 123");
        atom.commands.dispatch(editorElement, 'emacs-plus:set-mark');
        editor.selectRight(3);
        expect(EditorState.get(editor)).toEqual("(0)aaa[0] 123\n(1)bbb[1] 123\n(2)ccc[2] 123");
        expect(editor.getCursors().length).toBe(3);
        editor.selectDown();
        expect(EditorState.get(editor)).toEqual("(0)aaa 123\nbbb 123\nccc 123[0]");
        return expect(editor.getCursors().length).toBe(1);
      });
      return it('support multiple cursors', function() {
        var mark;
        mark = Mark["for"](editor);
        EditorState.set(editor, "[0]aaa\n[1]aaa\n[2]aaa");
        mark.activate(true);
        editor.selectRight(3);
        expect(EditorState.get(editor)).toEqual("(0)aaa[0]\n(1)aaa[1]\n(2)aaa[2]");
        editor.upperCase();
        waitsFor(function(done) {
          return setImmediate(done);
        });
        return runs(function() {
          expect(EditorState.get(editor)).toEqual("AAA[0]\nAAA[1]\nAAA[2]");
          return expect(mark.isActive()).toBe(false);
        });
      });
    });
    describe("deactivate", function() {
      it("deactivates the mark", function() {
        var mark;
        mark = Mark["for"](editor);
        mark.activate();
        expect(mark.isActive()).toBe(true);
        mark.deactivate();
        return expect(mark.isActive()).toBe(false);
      });
      return it("clears the selection", function() {
        var mark;
        EditorState.set(editor, "[0].");
        mark = Mark["for"](editor);
        mark.activate();
        keydown('f', {
          ctrl: true
        });
        expect(cursor.selection.isEmpty()).toBe(false);
        mark.deactivate();
        return expect(cursor.selection.isEmpty()).toBe(true);
      });
    });
    it("removes the mark mode from the editor", function() {
      var mark;
      EditorState.set(editor, ".[0]..");
      mark = Mark["for"](editor);
      mark.activate();
      editorElement = atom.views.getView(editor);
      expect(editorElement.classList.contains('mark-mode')).toBeTruthy();
      mark.deactivate();
      return expect(editorElement.classList.contains('mark-mode')).toBeFalsy();
    });
    describe("exchange", function() {
      return it("leaves the mark & selection active if it already was", function() {
        var mark;
        EditorState.set(editor, "[0].");
        mark = Mark["for"](editor);
        mark.activate();
        keydown('f', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual("(0).[0]");
        expect(mark.isActive()).toBe(true);
        mark.exchange();
        expect(EditorState.get(editor)).toEqual("[0].(0)");
        return expect(mark.isActive()).toBe(true);
      });
    });
    return describe('setBufferRange', function() {
      var mark;
      mark = [];
      beforeEach(function() {
        return mark = Mark["for"](editor);
      });
      it('keep selection range', function() {
        EditorState.set(editor, 'aaa b[0]bb ccc');
        expect(mark.isActive()).toBe(false);
        atom.commands.dispatch(editorElement, 'editor:select-word');
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb[0] ccc');
        expect(mark.isActive()).toBe(true);
        keydown('f', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb [0]ccc');
        EditorState.set(editor, 'aaa b(0)b[0]b ccc');
        mark.activate(true);
        expect(mark.isActive()).toBe(true);
        atom.commands.dispatch(editorElement, 'editor:select-word');
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb[0] ccc');
        expect(mark.isActive()).toBe(true);
        keydown('f', {
          ctrl: true
        });
        return expect(EditorState.get(editor)).toEqual('aaa (0)bbb [0]ccc');
      });
      return it('reversed', function() {
        EditorState.set(editor, 'aaa bbb[0] ccc');
        atom.commands.dispatch(editorElement, 'core:select-left');
        expect(EditorState.get(editor)).toEqual('aaa bb[0]b(0) ccc');
        expect(mark.isActive()).toBe(false);
        atom.commands.dispatch(editorElement, 'core:select-left');
        atom.commands.dispatch(editorElement, 'core:select-left');
        return expect(EditorState.get(editor)).toEqual('aaa [0]bbb(0) ccc');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/anirudh/.atom/packages/emacs-plus/spec/mark-spec.coffee
