(function() {
  var EditorState;

  EditorState = require('./editor-state');

  describe("EditorState", function() {
    var cursorPosition, cursorRange;
    cursorPosition = function(editor, i) {
      var cursor, point;
      cursor = editor.getCursors()[i];
      point = cursor != null ? cursor.getBufferPosition() : void 0;
      return [point != null ? point.row : void 0, point != null ? point.column : void 0];
    };
    cursorRange = function(editor, i) {
      var cursor, head, tail;
      cursor = editor.getCursors()[i];
      if (cursor == null) {
        return null;
      }
      head = cursor.marker.getHeadBufferPosition();
      tail = cursor.marker.getTailBufferPosition();
      return [head != null ? head.row : void 0, head != null ? head.column : void 0, tail != null ? tail.row : void 0, tail != null ? tail.column : void 0];
    };
    beforeEach(function() {
      return waitsForPromise((function(_this) {
        return function() {
          return atom.workspace.open().then(function(editor) {
            return _this.editor = editor;
          });
        };
      })(this));
    });
    describe(".set", function() {
      it("sets the buffer text", function() {
        EditorState.set(this.editor, 'hi');
        return expect(this.editor.getText()).toEqual('hi');
      });
      it("sets cursors where specified", function() {
        EditorState.set(this.editor, '[0]a[2]b[1]');
        expect(this.editor.getText()).toEqual('ab');
        expect(cursorPosition(this.editor, 0)).toEqual([0, 0]);
        expect(cursorPosition(this.editor, 1)).toEqual([0, 2]);
        return expect(cursorPosition(this.editor, 2)).toEqual([0, 1]);
      });
      it("handles missing cursors", function() {
        return expect(((function(_this) {
          return function() {
            return EditorState.set(_this.editor, '[0]x[2]');
          };
        })(this))).toThrow('missing head of cursor 1');
      });
      return it("sets forward & reverse selections if tails are specified", function() {
        EditorState.set(this.editor, 'a(0)b[1]c[0]d(1)e');
        expect(this.editor.getText()).toEqual('abcde');
        expect(cursorRange(this.editor, 0)).toEqual([0, 3, 0, 1]);
        return expect(cursorRange(this.editor, 1)).toEqual([0, 2, 0, 4]);
      });
    });
    return describe(".get", function() {
      it("correctly positions cursors", function() {
        this.editor.setText('abc');
        this.editor.getLastCursor().setBufferPosition([0, 2]);
        this.editor.addCursorAtBufferPosition([0, 1]);
        return expect(EditorState.get(this.editor)).toEqual('a[1]b[0]c');
      });
      return it("correctly positions heads & tails of forward & reverse selections", function() {
        var cursor;
        this.editor.setText('abcde');
        this.editor.getLastCursor().selection.setBufferRange([[0, 1], [0, 3]]);
        cursor = this.editor.addCursorAtBufferPosition([0, 0]);
        cursor.selection.setBufferRange([[0, 2], [0, 4]], {
          reversed: true
        });
        return expect(EditorState.get(this.editor)).toEqual('a(0)b[1]c[0]d(1)e');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvYW5pcnVkaC8uYXRvbS9wYWNrYWdlcy9lbWFjcy1wbHVzL3NwZWMvZWRpdG9yLXN0YXRlLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLFdBQUE7O0FBQUEsRUFBQSxXQUFBLEdBQWMsT0FBQSxDQUFRLGdCQUFSLENBQWQsQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxhQUFULEVBQXdCLFNBQUEsR0FBQTtBQUN0QixRQUFBLDJCQUFBO0FBQUEsSUFBQSxjQUFBLEdBQWlCLFNBQUMsTUFBRCxFQUFTLENBQVQsR0FBQTtBQUNmLFVBQUEsYUFBQTtBQUFBLE1BQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxVQUFQLENBQUEsQ0FBb0IsQ0FBQSxDQUFBLENBQTdCLENBQUE7QUFBQSxNQUNBLEtBQUEsb0JBQVEsTUFBTSxDQUFFLGlCQUFSLENBQUEsVUFEUixDQUFBO2FBRUEsaUJBQUMsS0FBSyxDQUFFLFlBQVIsa0JBQWEsS0FBSyxDQUFFLGVBQXBCLEVBSGU7SUFBQSxDQUFqQixDQUFBO0FBQUEsSUFLQSxXQUFBLEdBQWMsU0FBQyxNQUFELEVBQVMsQ0FBVCxHQUFBO0FBQ1osVUFBQSxrQkFBQTtBQUFBLE1BQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxVQUFQLENBQUEsQ0FBb0IsQ0FBQSxDQUFBLENBQTdCLENBQUE7QUFDQSxNQUFBLElBQWdCLGNBQWhCO0FBQUEsZUFBTyxJQUFQLENBQUE7T0FEQTtBQUFBLE1BR0EsSUFBQSxHQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQWQsQ0FBQSxDQUhQLENBQUE7QUFBQSxNQUlBLElBQUEsR0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFkLENBQUEsQ0FKUCxDQUFBO2FBS0EsZ0JBQUMsSUFBSSxDQUFFLFlBQVAsaUJBQVksSUFBSSxDQUFFLGVBQWxCLGlC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

//# sourceURL=/home/anirudh/.atom/packages/emacs-plus/spec/editor-state-spec.coffee
