(function() {
  var EditorState, Mark, getEditorElement, keydown, _, _ref;

  _ = require('underscore-plus');

  EditorState = require('./editor-state');

  Mark = require('./../lib/mark');

  _ref = require('./spec-helper'), keydown = _ref.keydown, getEditorElement = _ref.getEditorElement;

  describe("Mark", function() {
    var cursor, editor, editorElement, _ref1;
    _ref1 = [], editor = _ref1[0], editorElement = _ref1[1], cursor = _ref1[2];
    beforeEach(function() {
      var workspaceElement;
      workspaceElement = atom.views.getView(atom.workspace);
      jasmine.attachToDOM(workspaceElement);
      spyOn(_._, 'now').andCallFake(function() {
        return window.now;
      });
      return getEditorElement(function(element) {
        editorElement = element;
        editor = editorElement.getModel();
        return cursor = editor.getLastCursor();
      });
    });
    describe(".for", function() {
      it("returns the mark for the given cursor", function() {
        var cursor0, cursor1, mark0, mark1, _ref2;
        EditorState.set(editor, "a[0]b[1]c");
        _ref2 = editor.getCursors(), cursor0 = _ref2[0], cursor1 = _ref2[1];
        mark0 = Mark["for"](cursor0);
        mark1 = Mark["for"](cursor1);
        expect(mark0.cursor).toBe(cursor0);
        return expect(mark1.cursor).toBe(cursor1);
      });
      return it("returns the same Mark each time for a cursor", function() {
        var mark;
        mark = Mark["for"](cursor);
        return expect(Mark["for"](cursor)).toBe(mark);
      });
    });
    describe("constructor", function() {
      it("sets the mark to where the cursor is", function() {
        var column, mark, row, _ref2;
        EditorState.set(editor, ".[0]");
        mark = Mark["for"](cursor);
        _ref2 = mark.getBufferPosition(), row = _ref2.row, column = _ref2.column;
        return expect([row, column]).toEqual([0, 1]);
      });
      return it("deactivates and destroys the marker when the cursor is destroyed", function() {
        var cursor0, cursor1, mark1, numMarkers, _ref2;
        EditorState.set(editor, "[0].");
        _ref2 = editor.getCursors(), cursor0 = _ref2[0], cursor1 = _ref2[1];
        numMarkers = editor.getMarkerCount();
        cursor1 = editor.addCursorAtBufferPosition([0, 1]);
        mark1 = Mark["for"](cursor1);
        cursor1.destroy();
        return expect(mark1.isActive()).toBe(false);
      });
    });
    describe("set", function() {
      it("clears the active selection", function() {
        var mark;
        EditorState.set(editor, "a(0)b[0]c");
        mark = Mark["for"](cursor);
        expect(cursor.selection.getText()).toEqual('b');
        mark.set();
        return expect(cursor.selection.getText()).toEqual('');
      });
      return it("returns the mark so we can conveniently chain an activate() call", function() {
        var mark;
        mark = Mark["for"](cursor);
        return expect(mark.set()).toBe(mark);
      });
    });
    describe("activate", function() {
      it("activates the mark", function() {
        var mark;
        mark = Mark["for"](cursor);
        mark.activate();
        return expect(mark.isActive()).toBe(true);
      });
      it("causes cursor movements to extend the selection", function() {
        EditorState.set(editor, ".[0]..");
        Mark["for"](cursor).activate();
        cursor.setBufferPosition([0, 2]);
        return expect(EditorState.get(editor)).toEqual(".(0).[0].");
      });
      it("causes buffer edits to deactivate the mark", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](cursor);
        mark.set().activate();
        cursor.setBufferPosition([0, 2]);
        expect(EditorState.get(editor)).toEqual(".(0).[0].");
        editor.setTextInBufferRange([[0, 1], [0, 2]], 'x');
        expect(mark.isActive()).toBe(false);
        expect(EditorState.get(editor)).toEqual(".x[0].");
        return expect(cursor.selection.isEmpty()).toBe(true);
      });
      it("doesn't deactive the mark if changes are indents", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](cursor);
        mark.set().activate();
        cursor.setBufferPosition([0, 2]);
        expect(EditorState.get(editor)).toEqual(".(0).[0].");
        editor.indentSelectedRows();
        expect(mark.isActive()).toBe(true);
        expect(EditorState.get(editor)).toEqual("  .(0).[0].");
        return expect(cursor.selection.isEmpty()).toBe(false);
      });
      it("puts the editor into mark mode", function() {
        var mark;
        EditorState.set(editor, ".[0]..");
        mark = Mark["for"](cursor);
        mark.set().activate();
        editorElement = atom.views.getView(editor);
        return expect(editorElement.classList.contains('mark-mode')).toBeTruthy();
      });
      it('even if a cursor moves, keep selection.', function() {
        var mark;
        mark = Mark["for"](cursor);
        EditorState.set(editor, "aaa\n(0)bbb\nccc[0]");
        advanceClock(100);
        expect(mark.isActive()).toBe(true);
        keydown('n', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual("aaa\n(0)bbb\nccc[0]");
        return expect(cursor.selection.isEmpty()).toBe(false);
      });
      it('support merge selections', function() {
        EditorState.set(editor, "[0]aaa 123\n[1]bbb 123\n[2]ccc 123");
        atom.commands.dispatch(editorElement, 'emacs-plus:set-mark');
        editor.selectRight(3);
        expect(EditorState.get(editor)).toEqual("(0)aaa[0] 123\n(1)bbb[1] 123\n(2)ccc[2] 123");
        expect(editor.getCursors().length).toBe(3);
        editor.selectDown();
        expect(EditorState.get(editor)).toEqual("(0)aaa 123\nbbb 123\nccc 123[0]");
        return expect(editor.getCursors().length).toBe(1);
      });
      return it('support multiple cursors', function() {
        EditorState.set(editor, "[0]aaa\n[1]aaa\n[2]aaa");
        atom.commands.dispatch(editorElement, 'emacs-plus:set-mark');
        editor.selectRight(3);
        expect(EditorState.get(editor)).toEqual("(0)aaa[0]\n(1)aaa[1]\n(2)aaa[2]");
        editor.upperCase();
        expect(EditorState.get(editor)).toEqual("(0)AAA[0]\n(1)AAA[1]\n(2)AAA[2]");
        editor.lowerCase();
        return expect(EditorState.get(editor)).toEqual("(0)aaa[0]\n(1)aaa[1]\n(2)aaa[2]");
      });
    });
    describe("deactivate", function() {
      it("deactivates the mark", function() {
        var mark;
        mark = Mark["for"](cursor);
        mark.activate();
        expect(mark.isActive()).toBe(true);
        mark.deactivate();
        return expect(mark.isActive()).toBe(false);
      });
      return it("clears the selection", function() {
        var mark;
        EditorState.set(editor, "[0].");
        mark = Mark["for"](cursor);
        mark.activate();
        cursor.setBufferPosition([0, 1]);
        expect(cursor.selection.isEmpty()).toBe(false);
        mark.deactivate();
        return expect(cursor.selection.isEmpty()).toBe(true);
      });
    });
    it("removes the mark mode from the editor", function() {
      var mark;
      EditorState.set(editor, ".[0]..");
      mark = Mark["for"](cursor);
      mark.set().activate();
      editorElement = atom.views.getView(editor);
      expect(editorElement.classList.contains('mark-mode')).toBeTruthy();
      mark.deactivate();
      return expect(editorElement.classList.contains('mark-mode')).toBeFalsy();
    });
    describe("exchange", function() {
      return it("leaves the mark & selection active if it already was", function() {
        var mark;
        EditorState.set(editor, "[0].");
        mark = Mark["for"](cursor);
        mark.activate();
        cursor.setBufferPosition([0, 1]);
        expect(EditorState.get(editor)).toEqual("(0).[0]");
        expect(mark.isActive()).toBe(true);
        mark.exchange();
        expect(EditorState.get(editor)).toEqual("[0].(0)");
        return expect(mark.isActive()).toBe(true);
      });
    });
    return describe('setBufferRange', function() {
      var mark;
      mark = [];
      beforeEach(function() {
        return mark = Mark["for"](cursor);
      });
      it('keep selection range', function() {
        EditorState.set(editor, 'aaa b[0]bb ccc');
        atom.commands.dispatch(editorElement, 'editor:select-word');
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb[0] ccc');
        advanceClock(100);
        expect(mark.isActive()).toBe(true);
        keydown('f', {
          ctrl: true
        });
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb [0]ccc');
        EditorState.set(editor, 'aaa b(0)b[0]b ccc');
        advanceClock(100);
        expect(mark.isActive()).toBe(true);
        atom.commands.dispatch(editorElement, 'editor:select-word');
        expect(EditorState.get(editor)).toEqual('aaa (0)bbb[0] ccc');
        advanceClock(100);
        expect(mark.isActive()).toBe(true);
        keydown('f', {
          ctrl: true
        });
        return expect(EditorState.get(editor)).toEqual('aaa (0)bbb [0]ccc');
      });
      return it('reversed', function() {
        EditorState.set(editor, 'aaa bbb[0] ccc');
        atom.commands.dispatch(editorElement, 'core:select-left');
        expect(EditorState.get(editor)).toEqual('aaa bb[0]b(0) ccc');
        advanceClock(100);
        expect(mark.isActive()).toBe(true);
        atom.commands.dispatch(editorElement, 'core:select-left');
        atom.commands.dispatch(editorElement, 'core:select-left');
        return expect(EditorState.get(editor)).toEqual('aaa [0]bbb(0) ccc');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/anirudh/.atom/packages/emacs-plus/spec/mark-spec.coffee
